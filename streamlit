import streamlit as st
import pandas as pd
import numpy as np
from PIL import Image
from streamlit_drawable_canvas import st_canvas

st.set_page_config(page_title="Color Detection from Images", layout="wide")
st.title("Color Detection from Images")
st.write("Upload an image. Click anywhere on the image to detect the color at that pixel.")

# Upload image file
uploaded_file = st.file_uploader("Choose an image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Load the uploaded image using PIL
    image = Image.open(uploaded_file)
    if image.mode != "RGB":
        image = image.convert("RGB")
    
    # Convert image to numpy array
    image_np = np.array(image)

    st.markdown("**Instruction:** Click on the image (a red point will be drawn) to capture the pixel color.")

    # Set up canvas with the image as background to capture click events
    canvas_result = st_canvas(
        fill_color="rgba(255, 165, 0, 0.3)",  # A semi-transparent fill color
        stroke_width=10,
        stroke_color="#ff0000",  # Color for the clickable point marker
        background_image=image,
        update_streamlit=True,
        height=image.height,
        width=image.width,
        drawing_mode="point",  # Use point drawing mode
        key="canvas",
    )

    # Check if a click has been made and process the click data
    if canvas_result.json_data is not None and "objects" in canvas_result.json_data:
        if len(canvas_result.json_data["objects"]) > 0:
            # Use the first point data
            obj = canvas_result.json_data["objects"][0]
            # Get the point coordinates
            x = int(obj["left"])
            y = int(obj["top"])
            
            if 0 <= x < image_np.shape[1] and 0 <= y < image_np.shape[0]:
                r, g, b = image_np[y, x][:3]
                
                st.markdown(f"**Coordinates:** ({x}, {y})")
                st.markdown(f"**RGB Value:** ({r}, {g}, {b})")
                
                # Load the predefined colors dataset from colors.csv
                try:
                    df_colors = pd.read_csv("colors.csv", names=["color", "R", "G", "B"], header=None)
                except Exception as e:
                    st.error(f"Error loading colors dataset: {e}")
                    st.stop()
                    
                # Function to calculate Manhattan distance between two colors
                def calc_distance(r1, g1, b1, r2, g2, b2):
                    return abs(r1 - r2) + abs(g1 - g2) + abs(b1 - b2)
                
                minimum_distance = float("inf")
                closest_color_name = None
                
                # Iterate through available colors to find the best match
                for index, row in df_colors.iterrows():
                    distance = calc_distance(r, g, b, int(row["R"]), int(row["G"]), int(row["B"]))
                    if distance < minimum_distance:
                        minimum_distance = distance
                        closest_color_name = row["color"]
                
                st.markdown(f"**Detected Color:** {closest_color_name}")
                
                # Display a swatch of the detected color
                st.markdown(
                    f"<div style='width:100px; height:100px; background-color: rgb({r}, {g}, {b});"
                    "border: 1px solid #000;'></div>", 
                    unsafe_allow_html=True
                )
            else:
                st.error("Clicked coordinates are outside the image boundaries.")
        else:
            st.info("Click on the image to detect a color.")
else:
    st.info("Please upload an image file to begin.")
